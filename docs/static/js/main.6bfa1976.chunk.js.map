{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","urlApi","encodeURI","fetch","res","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","gif","key","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"qMA6BeA,EA1BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,0BAAMC,SATa,SAAAC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAAAP,GACxBF,EAAcE,EAAEQ,OAAOF,Y,uBCPdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,iDACoCC,UACvDH,GAFmB,8DAIHI,MAAMF,GAJH,cAIfG,EAJe,gBAKEA,EAAIC,OALN,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAVjB,kBAadL,GAbc,4CAAH,sDCWLQ,EATK,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,yBAAKI,UAAU,0CACb,yBAAKC,IAAKL,EAAKM,IAAKP,IACpB,2BAAIA,KCgBKQ,EAlBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDN,SAAAA,GAAa,IAAD,EACZd,mBAAS,CAAEqB,KAAM,GAAIc,SAAS,IADlB,mBAC/BC,EAD+B,KACxBC,EADwB,KAUtC,OARAC,qBAAU,WACRzB,EAAQC,GAAUyB,MAAK,SAAAjB,GACrBe,EAAS,CACPhB,KAAMC,EACNa,SAAS,SAGZ,CAACrB,IACGsB,EDRyBI,CAAa1B,GAA/BQ,EADkB,EACxBD,KAAYc,EADY,EACZA,QAEpB,OACE,oCACE,wBAAIJ,UAAU,qCAAqCjB,GAClDqB,GACC,uBAAGJ,UAAU,oCAAb,cAEF,yBAAKA,UAAU,aACZT,EAAKC,KAAI,SAAAkB,GAAG,OACX,kBAAC,EAAD,eAAaC,IAAKD,EAAIhB,IAAQgB,UEOzBE,EAlBM,WAAO,IAAD,EACW3C,mBAAS,CAAC,cADrB,mBAClB4C,EADkB,KACN7C,EADM,KAGzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,gDACA,4BACG6C,EAAWrB,KAAI,SAAAsB,GAAG,OACjB,kBAAC,EAAD,CAASH,IAAKG,EAAK/B,SAAU+B,UCVvCC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.6bfa1976.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories(cats => [inputValue, ...cats]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n};\n\nexport default AddCategory;\n","export const getGifs = async category => {\n  const urlApi = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&api_key=6MHVl6HTJ4twJYLAyRECVLcbOdEfZxmF&limit=5`;\n  const res = await fetch(urlApi);\n  const { data } = await res.json();\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    };\n  });\n  return gifs;\n};\n","import React from 'react';\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className='card animate__animated animate__fadeIn'>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { data: gifs, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n      {loading && (\n        <p className='animate__animated animate__flash'>Loading...</p>\n      )}\n      <div className='card-grid'>\n        {gifs.map(gif => (\n          <GifGridItem key={gif.id} {...gif} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = category => {\n  const [state, setState] = useState({ data: [], loading: true });\n  useEffect(() => {\n    getGifs(category).then(gifs => {\n      setState({\n        data: gifs,\n        loading: false\n      });\n    });\n  }, [category]);\n  return state;\n};\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['One Punch']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <button>Add category</button>\n      <ol>\n        {categories.map(cat => (\n          <GifGrid key={cat} category={cat} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}